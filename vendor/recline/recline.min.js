this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.Ckan=this.recline.Backend.Ckan||{};(function(b){b.__type__="ckan";var a=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;b.API_ENDPOINT="http://datahub.io/api";b.fetch=function(f){var h;if(f.endpoint){h=b.DataStore(f.endpoint)}else{var e=b._parseCkanResourceUrl(f.url);f.id=e.resource_id;h=b.DataStore(e.endpoint)}var d=new a();var g=h.search({resource_id:f.id,limit:0});g.done(function(l){var j=_.map(l.result.fields,function(m){m.type=m.type in c?c[m.type]:m.type;return m});var k={fields:j,useMemoryStore:false};d.resolve(k)});return d.promise()};b._normalizeQuery=function(f,e){var g={resource_id:e.id,q:f.q,filters:{},limit:f.size||10,offset:f.from||0};if(f.sort&&f.sort.length>0){var d=_.map(f.sort,function(h){return h.field+" "+(h.order||"")});g.sort=d.join(",")}if(f.filters&&f.filters.length>0){_.each(f.filters,function(h){if(h.type==="term"){g.filters[h.field]=h.term}})}return g};b.query=function(g,f){var k;if(f.endpoint){k=b.DataStore(f.endpoint)}else{var e=b._parseCkanResourceUrl(f.url);f.id=e.resource_id;k=b.DataStore(e.endpoint)}var j=b._normalizeQuery(g,f);var d=new a();var h=k.search(j);h.done(function(m){var l={total:m.result.total,hits:m.result.records};d.resolve(l)});return d.promise()};b.DataStore=function(e){var d={endpoint:e||b.API_ENDPOINT};d.search=function(g){var f=d.endpoint+"/3/action/datastore_search";var h=jQuery.ajax({url:f,type:"POST",data:JSON.stringify(g)});return h};return d};b._parseCkanResourceUrl=function(e){parts=e.split("/");var d=parts.length;return{resource_id:parts[d-1],endpoint:parts.slice(0,[d-4]).join("/")+"/api"}};var c={int4:"integer",int8:"integer",float8:"float"}}(this.recline.Backend.Ckan));this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.CSV=this.recline.Backend.CSV||{};(function(e){e.__type__="csv";var c=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;e.fetch=function(m){var j=new c();if(m.file){var h=new FileReader();var k=m.encoding||"UTF-8";h.onload=function(o){var n=e.parseCSV(o.target.result,m);j.resolve({records:n,metadata:{filename:m.file.name},useMemoryStore:true})};h.onerror=function(n){alert("Failed to load file. Code: "+n.target.error.code)};h.readAsText(m.file,k)}else{if(m.data){var l=e.parseCSV(m.data,m);j.resolve({records:l,useMemoryStore:true})}else{if(m.url){jQuery.get(m.url).done(function(o){var n=e.parseCSV(o,m);j.resolve({records:n,useMemoryStore:true})})}}}return j.promise()};e.parseCSV=function(v,w){v=f(v);var w=w||{};var r=(w.trim===false)?false:true;var j=w.delimiter||",";var h=w.quotechar||'"';var t="",m=false,n=false,p="",u=[],k=[],l,o;o=function(s){if(n!==true){if(s===""){s=null}else{if(r===true){s=a(s)}}if(g.test(s)){s=parseInt(s,10)}else{if(d.test(s)){s=parseFloat(s,10)}}}return s};for(l=0;l<v.length;l+=1){t=v.charAt(l);if(m===false&&(t===j||t==="\n")){p=o(p);u.push(p);if(t==="\n"){k.push(u);u=[]}p="";n=false}else{if(t!==h){p+=t}else{if(!m){m=true;n=true}else{if(v.charAt(l+1)===h){p+=h;l+=1}else{m=false}}}}}p=o(p);u.push(p);k.push(u);return k};e.serializeCSV=function(o,w){var s=null;if(o instanceof Array){s=o}else{s=[];var v=_.pluck(o.fields,"id");s.push(v);_.each(o.records,function(j,x){var y=_.map(v,function(z){return j[z]});s.push(y)})}var w=w||{};var k=w.delimiter||",";var h=w.quotechar||'"';var t="",r="",u="",m="",n,l,p;p=function(j){if(j===null){j=""}else{if(typeof j==="string"&&b.test(j)){j=h+j+h}else{if(typeof j==="number"){j=j.toString(10)}}}return j};for(n=0;n<s.length;n+=1){t=s[n];for(l=0;l<t.length;l+=1){r=p(t[l]);if(l===(t.length-1)){u+=r;m+=u+"\n";u=""}else{u+=r+k}r=""}}return m};var g=/^\d+$/,d=/^\d*\.\d+$|^\d+\.\d*$/,b=/^\s|\s$|,|"|\n/,a=(function(){if(String.prototype.trim){return function(h){return h.trim()}}else{return function(h){return h.replace(/^\s*/,"").replace(/\s*$/,"")}}}());function f(h){if(h.charAt(h.length-1)!=="\n"){return h}else{return h.substring(0,h.length-1)}}}(this.recline.Backend.CSV));this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.DataProxy=this.recline.Backend.DataProxy||{};(function(c){c.__type__="dataproxy";c.dataproxy_url="http://jsonpdataproxy.appspot.com";c.timeout=5000;var b=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;c.fetch=function(f){var e={url:f.url,"max-results":f.size||f.rows||1000,type:f.format||""};var g=jQuery.ajax({url:c.dataproxy_url,data:e,dataType:"jsonp"});var d=new b();a(g).done(function(h){if(h.error){d.reject(h.error)}d.resolve({records:h.data,fields:h.fields,useMemoryStore:true})}).fail(function(h){d.reject(h)});return d.promise()};var a=function(e){var d=new b();var f=setTimeout(function(){d.reject({message:"Request Error: Backend did not respond after "+(c.timeout/1000)+" seconds"})},c.timeout);e.done(function(g){clearTimeout(f);d.resolve(g)}).fail(function(g){clearTimeout(f);d.reject(g)});return d.promise()}}(this.recline.Backend.DataProxy));this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.ElasticSearch=this.recline.Backend.ElasticSearch||{};(function(c,d){d.__type__="elasticsearch";var a=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;d.Wrapper=function(g,f){var e=this;this.endpoint=g;this.options=_.extend({dataType:"json"},f);this.mapping=function(){var h=e.endpoint+"/_mapping";var j=b({url:h,dataType:this.options.dataType});return j};this.get=function(j){var h=this.endpoint+"/"+j;return b({url:h,dataType:"json"})};this.upsert=function(j){var h=JSON.stringify(j);url=this.endpoint;if(j.id){url+="/"+j.id}return b({url:url,type:"POST",data:h,dataType:"json"})};this.remove=function(h){url=this.endpoint;url+="/"+h;return b({url:url,type:"DELETE",dataType:"json"})};this._normalizeQuery=function(l){var h=this;var k=(l&&l.toJSON)?l.toJSON():_.extend({},l);var j={constant_score:{query:{}}};if(!k.q){j.constant_score.query={match_all:{}}}else{j.constant_score.query={query_string:{query:k.q}}}if(k.filters&&k.filters.length){j.constant_score.filter={and:[]};_.each(k.filters,function(m){j.constant_score.filter.and.push(h._convertFilter(m))})}return j},this._normalizeSort=function(j){var h=_.map(j,function(m){var l={};var k=_.clone(m);delete k.field;l[m.field]=k;return l});return h},this._convertFilter=function(j){var h={};h[j.type]={};if(j.type==="term"){h.term[j.field]=j.term.toLowerCase()}else{if(j.type==="geo_distance"){h.geo_distance[j.field]=j.point;h.geo_distance.distance=j.distance;h.geo_distance.unit=j.unit}}return h},this.query=function(k){var m=(k&&k.toJSON)?k.toJSON():_.extend({},k);m.query=this._normalizeQuery(k);delete m.q;delete m.filters;if(m.sort&&m.sort.length>0){m.sort=this._normalizeSort(m.sort)}var j={source:JSON.stringify(m)};var h=this.endpoint+"/_search";var l=b({url:h,data:j,dataType:this.options.dataType});return l}};d.esOptions={};d.fetch=function(f){var g=new d.Wrapper(f.url,d.esOptions);var e=new a();g.mapping().done(function(k){if(!k){e.reject({message:"Elastic Search did not return a mapping"});return}var j=_.keys(k)[0];var h=_.map(k[j].properties,function(m,l){m.id=l;return m});e.resolve({fields:h})}).fail(function(h){e.reject(h)});return e.promise()};d.save=function(f,g){var h=new d.Wrapper(g.url,d.esOptions);if(f.creates.length+f.updates.length+f.deletes.length>1){var e=new a();msg="Saving more than one item at a time not yet supported";alert(msg);e.reject(msg);return e.promise()}if(f.creates.length>0){return h.upsert(f.creates[0])}else{if(f.updates.length>0){return h.upsert(f.updates[0])}else{if(f.deletes.length>0){return h.remove(f.deletes[0].id)}}}};d.query=function(g,f){var e=new a();var j=new d.Wrapper(f.url,d.esOptions);var h=j.query(g);h.done(function(l){var k={total:l.hits.total};k.hits=_.map(l.hits.hits,function(m){if(!("id" in m._source)&&m._id){m._source.id=m._id}return m._source});if(l.facets){k.facets=l.facets}e.resolve(k)}).fail(function(l){var k={title:"Failed: "+l.status+" code",message:l.responseText};e.reject(k)});return e.promise()};var b=function(f,g){var e={};if(g){e={beforeSend:function(h){_.each(g,function(k,j){h.setRequestHeader(j,k)})}}}var f=_.extend(e,f);return c.ajax(f)}}(jQuery,this.recline.Backend.ElasticSearch));this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.GDocs=this.recline.Backend.GDocs||{};(function(b){b.__type__="gdocs";var a=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;b.fetch=function(e){var c=new a();var d=b.getGDocsAPIUrls(e.url);(function(){var f=new a();jQuery.getJSON(d.spreadsheet,function(g){f.resolve({spreadsheetTitle:g.feed.title.$t})});return f.promise()}()).then(function(f){jQuery.getJSON(d.worksheet,function(j){var h=b.parseData(j);var g=_.map(h.fields,function(k){return{id:k}});c.resolve({metadata:{title:f.spreadsheetTitle+" :: "+h.worksheetTitle,spreadsheetTitle:f.spreadsheetTitle,worksheetTitle:h.worksheetTitle},records:h.records,fields:g,useMemoryStore:true})})});return c.promise()};b.parseData=function(j,d){var d=d||{};var g=d.colTypes||{};var f={fields:[],records:[]};var c=j.feed.entry||[];var e;var h;var k=/^([\d\.\-]+)\%$/;for(e in c[0]){if(/^gsx/.test(e)){h=e.substr(4);f.fields.push(h)}}f.records=_.map(c,function(l){var m={};_.each(f.fields,function(o){var p="gsx$"+o;var r=l[p].$t;var n;if(g[o]==="percent"&&k.test(r)){n=k.exec(r)[1];r=parseFloat(n)/100}m[o]=r});return m});f.worksheetTitle=j.feed.title.$t;return f};b.getGDocsAPIUrls=function(c){var e=/.*spreadsheet\/ccc?.*key=([^#?&+]+)[^#]*(#gid=([\d]+).*)?/;var f=c.match(e);var d;var h;var g;if(!!f){d=f[1];h=parseInt(f[3])+1;if(isNaN(h)){h=1}g={worksheet:"https://spreadsheets.google.com/feeds/list/"+d+"/"+h+"/public/values?alt=json",spreadsheet:"https://spreadsheets.google.com/feeds/worksheets/"+d+"/public/basic?alt=json"}}else{d=c.split("/")[5];h=1;g={worksheet:"https://spreadsheets.google.com/feeds/list/"+d+"/"+h+"/public/values?alt=json",spreadsheet:"https://spreadsheets.google.com/feeds/worksheets/"+d+"/public/basic?alt=json"}}return g}}(this.recline.Backend.GDocs));this.recline=this.recline||{};this.recline.Backend=this.recline.Backend||{};this.recline.Backend.Memory=this.recline.Backend.Memory||{};(function(b){b.__type__="memory";var a=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;b.Store=function(e,c){var d=this;this.records=e;this.data=this.records;if(c){this.fields=c}else{if(e){this.fields=_.map(e[0],function(g,f){return{id:f,type:"string"}})}}this.update=function(f){_.each(d.records,function(h,g){if(f.id===h.id){d.records[g]=f}})};this.remove=function(f){var g=_.reject(d.records,function(h){return(f.id===h.id)});this.records=g};this.save=function(h,j){var g=this;var f=new a();_.each(h.updates,function(k){g.update(k)});_.each(h.deletes,function(k){g.remove(k)});f.resolve();return f.promise()},this.query=function(l){var f=new a();var k=l.size||this.records.length;var m=l.from||0;var h=this.records;h=this._applyFilters(h,l);h=this._applyFreeTextQuery(h,l);_.each(l.sort,function(n){var o=n.field;h=_.sortBy(h,function(r){var p=r[o];return p});if(n.order=="desc"){h.reverse()}});var j=this.computeFacets(h,l);var g={total:h.length,hits:h.slice(m,m+k),facets:j};f.resolve(g);return f.promise()};this._applyFilters=function(k,f){var g=f.filters;var o={term:h,range:l,geo_distance:j};var p={integer:function(r){return parseFloat(r,10)},"float":function(r){return parseFloat(r,10)},number:function(r){return parseFloat(r,10)},string:function(r){return r.toString()},date:function(r){return new Date(r).valueOf()},datetime:function(r){return new Date(r).valueOf()}};var m={};_.each(d.fields,function(r){m[r.id]=r});function n(s){var r=m[s.field].type||"string";return p[r]}return _.filter(k,function(r){var s=_.map(g,function(t){return o[t.type](r,t)});return _.all(s,_.identity)});function h(r,t){var v=n(t);var u=v(r[t.field]);var s=v(t.term);return(u===s)}function l(r,v){var t=(v.start==null||v.start==="");var s=(v.stop==null||v.stop==="");var x=n(v);var w=x(r[v.field]);var y=x(v.start);var u=x(v.stop);if((!t||!s)&&w===""){return false}return((t||w>=y)&&(s||w<=u))}function j(){}};this._applyFreeTextQuery=function(f,j){if(j.q){var h=j.q.split(" ");var g=_.map(h,function(k){return new RegExp(k.toLowerCase())});f=_.filter(f,function(k){var l=true;_.each(g,function(n){var m=false;_.each(d.fields,function(p){var o=k[p.id];if((o!==null)&&(o!==undefined)){o=o.toString()}else{o=""}m=m||(n.test(o.toLowerCase()))});l=l&&m});return l})}return f};this.computeFacets=function(f,g){var h={};if(!g.facets){return h}_.each(g.facets,function(j,k){h[k]=new recline.Model.Facet({id:k}).toJSON();h[k].termsall={}});_.each(f,function(j){_.each(g.facets,function(m,o){var k=m.terms.field;var n=j[k];var l=h[o];if(n){l.termsall[n]=l.termsall[n]?l.termsall[n]+1:1}else{l.missing=l.missing+1}})});_.each(g.facets,function(l,m){var j=h[m];var k=_.map(j.termsall,function(o,n){return{term:n,count:o}});j.terms=_.sortBy(k,function(n){return -n.count});j.terms=j.terms.slice(0,10)});return h};this.transform=function(g){var f=new a();d.records=_.map(d.records,g);d.records=_.filter(d.records,function(h){return h!=null});f.resolve();return f.promise()}}}(this.recline.Backend.Memory));this.recline=this.recline||{};this.recline.Data=this.recline.Data||{};(function(my){my.Transform={};my.Transform.evalFunction=function(funcString){try{eval("var editFunc = "+funcString)}catch(e){return{errorMessage:e+""}}return editFunc};my.Transform.previewTransform=function(docs,editFunc,currentColumn){var preview=[];var updated=my.Transform.mapDocs($.extend(true,{},docs),editFunc);for(var i=0;i<updated.docs.length;i++){var before=docs[i],after=updated.docs[i];if(!after){after={}}if(currentColumn){preview.push({before:before[currentColumn],after:after[currentColumn]})}else{preview.push({before:before,after:after})}}return preview};my.Transform.mapDocs=function(docs,editFunc){var edited=[],deleted=[],failed=[];var updatedDocs=_.map(docs,function(doc){try{var updated=editFunc(_.clone(doc))}catch(e){failed.push(doc);return}if(updated===null){updated={_deleted:true};edited.push(updated);deleted.push(doc)}else{if(updated&&!_.isEqual(updated,doc)){edited.push(updated)}}return updated});return{updates:edited,docs:updatedDocs,deletes:deleted,failed:failed}}}(this.recline.Data));if(!("indexOf" in Array.prototype)){Array.prototype.indexOf=function(b,a){if(a===undefined){a=0}if(a<0){a+=this.length}if(a<0){a=0}for(var c=this.length;a<c;a++){if(a in this&&this[a]===b){return a}}return -1}}if(!("lastIndexOf" in Array.prototype)){Array.prototype.lastIndexOf=function(b,a){if(a===undefined){a=this.length-1}if(a<0){a+=this.length}if(a>this.length-1){a=this.length-1}for(a++;a-->0;){if(a in this&&this[a]===b){return a}}return -1}}if(!("forEach" in Array.prototype)){Array.prototype.forEach=function(c,b){for(var a=0,d=this.length;a<d;a++){if(a in this){c.call(b,this[a],a,this)}}}}if(!("map" in Array.prototype)){Array.prototype.map=function(d,c){var a=new Array(this.length);for(var b=0,e=this.length;b<e;b++){if(b in this){a[b]=d.call(c,this[b],b,this)}}return a}}if(!("filter" in Array.prototype)){Array.prototype.filter=function(d,e){var a=[],b;for(var c=0,f=this.length;c<f;c++){if(c in this&&d.call(e,b=this[c],c,this)){a.push(b)}}return a}}if(!("every" in Array.prototype)){Array.prototype.every=function(a,c){for(var b=0,d=this.length;b<d;b++){if(b in this&&!a.call(c,this[b],b,this)){return false}}return true}}if(!("some" in Array.prototype)){Array.prototype.some=function(a,c){for(var b=0,d=this.length;b<d;b++){if(b in this&&a.call(c,this[b],b,this)){return true}}return false}}this.recline=this.recline||{};this.recline.Model=this.recline.Model||{};(function(j){var g=_.isUndefined(this.jQuery)?_.Deferred:jQuery.Deferred;j.Dataset=Backbone.Model.extend({constructor:function a(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"query");this.backend=null;if(this.get("backend")){this.backend=this._backendFromString(this.get("backend"))}else{if(this.get("records")){this.backend=recline.Backend.Memory}}this.fields=new j.FieldList();this.records=new j.RecordList();this._changes={deletes:[],updates:[],creates:[]};this.facets=new j.FacetList();this.recordCount=null;this.queryState=new j.Query();this.queryState.bind("change",this.query);this.queryState.bind("facet:add",this.query);this._store=this.backend;if(this.backend==recline.Backend.Memory){this.fetch()}},fetch:function(){var m=this;var l=new g();if(this.backend!==recline.Backend.Memory){this.backend.fetch(this.toJSON()).done(n).fail(function(o){l.reject(o)})}else{n({records:this.get("records"),fields:this.get("fields"),useMemoryStore:true})}function n(p){var o=m._normalizeRecordsAndFields(p.records,p.fields);if(p.useMemoryStore){m._store=new recline.Backend.Memory.Store(o.records,o.fields)}m.set(p.metadata);m.fields.reset(o.fields);m.query().done(function(){l.resolve(m)}).fail(function(r){l.reject(r)})}return l.promise()},_normalizeRecordsAndFields:function(n,l){if(!l&&n&&n.length>0){if(n[0] instanceof Array){l=n[0];n=n.slice(1)}else{l=_.map(_.keys(n[0]),function(o){return{id:o}})}}if(l&&l.length>0&&(l[0]===null||typeof(l[0])!="object")){var m={};l=_.map(l,function(r,p){if(r===null){r=""}else{r=r.toString()}var o=r.replace(/^\s+|\s+$/g,"");if(o===""){o="_noname_";r=o}while(o in m){m[r]+=1;o=r+m[r]}if(!(r in m)){m[r]=0}return{id:o}})}if(n&&n.length>0&&n[0] instanceof Array){n=_.map(n,function(p){var o={};_.each(l,function(s,r){o[s.id]=p[r]});return o})}return{fields:l,records:n}},save:function(){var l=this;return this._store.save(this._changes,this.toJSON())},transform:function(m){var l=this;if(!this._store.transform){alert("Transform is not supported with this backend: "+this.get("backend"));return}this.trigger("recline:flash",{message:"Updating all visible docs. This could take a while...",persist:true,loader:true});this._store.transform(m).done(function(){l.query();l.trigger("recline:flash",{message:"Records updated successfully"})})},query:function(n){var m=this;var l=new g();this.trigger("query:start");if(n){this.queryState.set(n,{silent:true})}var o=this.queryState.toJSON();this._store.query(o,this.toJSON()).done(function(p){m._handleQueryResult(p);m.trigger("query:done");l.resolve(m.records)}).fail(function(p){m.trigger("query:fail",p);l.reject(p)});return l.promise()},_handleQueryResult:function(n){var l=this;l.recordCount=n.total;var o=_.map(n.hits,function(p){var r=new j.Record(p);r.fields=l.fields;r.bind("change",function(s){l._changes.updates.push(s.toJSON())});r.bind("destroy",function(s){l._changes.deletes.push(s.toJSON())});return r});l.records.reset(o);if(n.facets){var m=_.map(n.facets,function(p,r){p.id=r;return new j.Facet(p)});l.facets.reset(m)}},toTemplateJSON:function(){var l=this.toJSON();l.recordCount=this.recordCount;l.fields=this.fields.toJSON();return l},getFieldsSummary:function(){var m=this;var n=new j.Query();n.set({size:0});this.fields.each(function(o){n.addFacet(o.id)});var l=new g();this._store.query(n.toJSON(),this.toJSON()).done(function(o){if(o.facets){_.each(o.facets,function(p,s){p.id=s;var r=new j.Facet(p);m.fields.get(s).facets.reset(r)})}l.resolve(o)});return l.promise()},recordSummary:function(l){return l.summary()},_backendFromString:function(m){var l=null;if(recline&&recline.Backend){_.each(_.keys(recline.Backend),function(n){if(n.toLowerCase()===m.toLowerCase()){l=recline.Backend[n]}})}return l}});j.Record=Backbone.Model.extend({constructor:function h(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"getFieldValue")},getFieldValue:function(l){val=this.getFieldValueUnrendered(l);if(l&&!_.isUndefined(l.renderer)){val=l.renderer(val,l,this.toJSON())}return val},getFieldValueUnrendered:function(l){if(!l){return""}var m=this.get(l.id);if(l.deriver){m=l.deriver(m,l,this)}return m},summary:function(l){var m=this;var n='<div class="recline-record-summary">';this.fields.each(function(o){if(o.id!="id"){n+='<div class="'+o.id+'"><strong>'+o.get("label")+"</strong>: "+m.getFieldValue(o)+"</div>"}});n+="</div>";return n},fetch:function(){},save:function(){},destroy:function(){this.trigger("destroy",this)}});j.RecordList=Backbone.Collection.extend({constructor:function b(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:j.Record});j.Field=Backbone.Model.extend({constructor:function e(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:{label:null,type:"string",format:null,is_derived:false},initialize:function(m,l){if("0" in m){throw new Error("Looks like you did not pass a proper hash with id to Field constructor")}if(this.attributes.label===null){this.set({label:this.id})}if(this.attributes.type.toLowerCase() in this._typeMap){this.attributes.type=this._typeMap[this.attributes.type.toLowerCase()]}if(l){this.renderer=l.renderer;this.deriver=l.deriver}if(!this.renderer){this.renderer=this.defaultRenderers[this.get("type")]}this.facets=new j.FacetList()},_typeMap:{text:"string","double":"number","float":"number",numeric:"number","int":"integer",datetime:"date-time",bool:"boolean",timestamp:"date-time",json:"object"},defaultRenderers:{object:function(n,m,l){return JSON.stringify(n)},geo_point:function(n,m,l){return JSON.stringify(n)},number:function(o,n,m){var l=n.get("format");if(l==="percentage"){return o+"%"}return o},string:function(p,o,n){var m=o.get("format");if(m==="markdown"){if(typeof Showdown!=="undefined"){var l=new Showdown.converter();out=l.makeHtml(p);return out}else{return p}}else{if(m=="plain"){return p}else{if(p&&typeof p==="string"){p=p.replace(/(https?:\/\/[^ ]+)/g,'<a href="$1">$1</a>')}return p}}}}});j.FieldList=Backbone.Collection.extend({constructor:function f(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:j.Field});j.Query=Backbone.Model.extend({constructor:function c(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{size:100,from:0,q:"",facets:{},filters:[]}},_filterTemplates:{term:{type:"term",field:"",term:""},range:{type:"range",start:"",stop:""},geo_distance:{type:"geo_distance",distance:10,unit:"km",point:{lon:0,lat:0}}},addFilter:function(l){var n=JSON.parse(JSON.stringify(l));if(_.keys(l).length<=3){n=_.defaults(n,this._filterTemplates[l.type])}var m=this.get("filters");m.push(n);this.trigger("change:filters:new-blank")},updateFilter:function(l,m){},removeFilter:function(m){var l=this.get("filters");l.splice(m,1);this.set({filters:l});this.trigger("change")},addFacet:function(l){var m=this.get("facets");if(_.contains(_.keys(m),l)){return}m[l]={terms:{field:l}};this.set({facets:m},{silent:true});this.trigger("facet:add",this)},addHistogramFacet:function(l){var m=this.get("facets");m[l]={date_histogram:{field:l,interval:"day"}};this.set({facets:m},{silent:true});this.trigger("facet:add",this)}});j.Facet=Backbone.Model.extend({constructor:function k(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{_type:"terms",total:0,other:0,missing:0,terms:[]}}});j.FacetList=Backbone.Collection.extend({constructor:function d(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:j.Facet});j.ObjectState=Backbone.Model.extend({});Backbone.sync=function(n,m,l){return m.backend.sync(n,m,l)}}(this.recline.Model));this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Flot=Backbone.View.extend({template:'     <div class="recline-flot">       <div class="panel graph" style="display: block;">         <div class="js-temp-notice alert alert-block">           <h3 class="alert-heading">Hey there!</h3>           <p>There\'s no graph here yet because we don\'t know what fields you\'d like to see plotted.</p>           <p>Please tell us by <strong>using the menu on the right</strong> and a graph will automatically appear.</p>         </div>       </div>     </div> ',initialize:function(e){var d=this;this.graphColors=["#edc240","#afd8f8","#cb4b4b","#4da74d","#9440ed"];this.el=a(this.el);_.bindAll(this,"render","redraw","_toolTip","_xaxisLabel");this.needToRedraw=false;this.model.bind("change",this.render);this.model.fields.bind("reset",this.render);this.model.fields.bind("add",this.render);this.model.records.bind("add",this.redraw);this.model.records.bind("reset",this.redraw);var c=_.extend({group:null,series:[],graphType:"lines-and-points"},e.state);this.state=new recline.Model.ObjectState(c);this.previousTooltipPoint={x:null,y:null};this.editor=new b.FlotControls({model:this.model,state:this.state.toJSON()});this.editor.state.bind("change",function(){d.state.set(d.editor.state.toJSON());d.redraw()});this.elSidebar=this.editor.el},render:function(){var c=this;var d=this.model.toTemplateJSON();var e=Mustache.render(this.template,d);a(this.el).html(e);this.$graph=this.el.find(".panel.graph");this.$graph.on("plothover",this._toolTip);return this},redraw:function(){var e=!jQuery.expr.filters.hidden(this.el[0]);if((!e||this.model.records.length===0)){this.needToRedraw=true;return}if(this.state.get("group")&&this.state.get("series")){var d=this.createSeries();var c=this.getGraphOptions(this.state.attributes.graphType,d[0].data.length);this.plot=a.plot(this.$graph,d,c)}},show:function(){if(this.needToRedraw){this.redraw()}},_toolTip:function(f,k,e){if(e){if(this.previousTooltipPoint.x!==e.dataIndex||this.previousTooltipPoint.y!==e.seriesIndex){this.previousTooltipPoint.x=e.dataIndex;this.previousTooltipPoint.y=e.seriesIndex;a("#recline-flot-tooltip").remove();var c=e.datapoint[0].toFixed(2),j=e.datapoint[1].toFixed(2);if(this.state.attributes.graphType==="bars"){c=e.datapoint[1].toFixed(2),j=e.datapoint[0].toFixed(2)}var d=_.template("<%= group %> = <%= x %>, <%= series %> = <%= y %>",{group:this.state.attributes.group,x:this._xaxisLabel(c),series:e.series.label,y:j});var g,h;if(this.state.attributes.graphType==="bars"){g=e.pageX+15;h=e.pageY-10}else{if(this.state.attributes.graphType==="columns"){g=e.pageX+15;h=e.pageY}else{g=e.pageX+10;h=e.pageY-20}}a('<div id="recline-flot-tooltip">'+d+"</div>").css({top:h,left:g}).appendTo("body").fadeIn(200)}}else{a("#recline-flot-tooltip").remove();this.previousTooltipPoint.x=null;this.previousTooltipPoint.y=null}},_xaxisLabel:function(d){var c=this.model.fields.get(this.state.attributes.group);var f=c.get("type");var e=(f==="date"||f==="date-time"||f==="time");if(this.xvaluesAreIndex){d=parseInt(d,10);d=this.model.records.models[d].get(this.state.attributes.group)}if(e){d=new Date(d).toLocaleDateString()}return d},getGraphOptions:function(d,g){var o=this;var e=function(p){var r=o._xaxisLabel(p)||"";if(typeof r!=="string"){r=r.toString()}if(o.state.attributes.graphType!=="bars"&&r.length>10){r=r.slice(0,10)+"..."}return r};var j={};j.tickFormatter=e;if(this.xvaluesAreIndex){var n=Math.min(this.model.records.length,15);var l=this.model.records.length/n;var k=[];for(i=0;i<n;i++){k.push(parseInt(i*l,10))}j.ticks=k}var f={};f.autoscale=true;f.autoscaleMargin=0.02;var h={};h.position="ne";var c={};c.hoverable=true;c.clickable=true;c.borderColor="#aaaaaa";c.borderWidth=1;var m={lines:{legend:h,colors:this.graphColors,lines:{show:true},xaxis:j,yaxis:f,grid:c},points:{legend:h,colors:this.graphColors,points:{show:true,hitRadius:5},xaxis:j,yaxis:f,grid:c},"lines-and-points":{legend:h,colors:this.graphColors,points:{show:true,hitRadius:5},lines:{show:true},xaxis:j,yaxis:f,grid:c},bars:{legend:h,colors:this.graphColors,lines:{show:false},xaxis:f,yaxis:j,grid:c,bars:{show:true,horizontal:true,shadowSize:0,align:"center",barWidth:0.8}},columns:{legend:h,colors:this.graphColors,lines:{show:false},xaxis:j,yaxis:f,grid:c,bars:{show:true,horizontal:false,shadowSize:0,align:"center",barWidth:0.8}}};if(o.state.get("graphOptions")){return _.extend(m[d],o.state.get("graphOptions"))}else{return m[d]}},createSeries:function(){var c=this;c.xvaluesAreIndex=false;var d=[];_.each(this.state.attributes.series,function(g){var f=[];var e=c.model.fields.get(g).get("label");_.each(c.model.records.models,function(m,k){var j=c.model.fields.get(c.state.attributes.group);var h=m.getFieldValue(j);var p=j.get("type");var l=(p==="date"||p==="date-time"||p==="time");if(l){c.xvaluesAreIndex=true;h=k}else{if(typeof h==="string"){h=parseFloat(h);if(isNaN(h)){h=k;c.xvaluesAreIndex=true}}}var o=c.model.fields.get(g);var n=m.getFieldValue(o);if(c.state.attributes.graphType=="bars"){f.push([n,h])}else{f.push([h,n])}});d.push({data:f,label:e,hoverable:true})});return d}});b.FlotControls=Backbone.View.extend({className:"editor",template:'   <div class="editor">     <form class="form-stacked">       <div class="clearfix">         <label>Graph Type</label>         <div class="input editor-type">           <select>           <option value="lines-and-points">Lines and Points</option>           <option value="lines">Lines</option>           <option value="points">Points</option>           <option value="bars">Bars</option>           <option value="columns">Columns</option>           </select>         </div>         <label>Group Column (Axis 1)</label>         <div class="input editor-group">           <select>           <option value="">Please choose ...</option>           {{#fields}}           <option value="{{id}}">{{label}}</option>           {{/fields}}           </select>         </div>         <div class="editor-series-group">         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-add">Add Series</button>       </div>       <div class="editor-buttons editor-submit" comment="hidden temporarily" style="display: none;">         <button class="editor-save">Save</button>         <input type="hidden" class="editor-id" value="chart-1" />       </div>     </form>   </div> ',templateSeriesEditor:'     <div class="editor-series js-series-{{seriesIndex}}">       <label>Series <span>{{seriesName}} (Axis 2)</span>         [<a href="#remove" class="action-remove-series">Remove</a>]       </label>       <div class="input">         <select>         {{#fields}}         <option value="{{id}}">{{label}}</option>         {{/fields}}         </select>       </div>     </div>   ',events:{"change form select":"onEditorSubmit","click .editor-add":"_onAddSeries","click .action-remove-series":"removeSeries"},initialize:function(d){var c=this;this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("reset",this.render);this.model.fields.bind("add",this.render);this.state=new recline.Model.ObjectState(d.state);this.render()},render:function(){var d=this;var e=this.model.toTemplateJSON();var f=Mustache.render(this.template,e);this.el.html(f);if(this.state.get("graphType")){this._selectOption(".editor-type",this.state.get("graphType"))}if(this.state.get("group")){this._selectOption(".editor-group",this.state.get("group"))}var c=[""];if(this.state.get("series").length>0){c=this.state.get("series")}_.each(c,function(h,g){d.addSeries(g);d._selectOption(".editor-series.js-series-"+g,h)});return this},_selectOption:function(e,d){var c=this.el.find(e+" select > option");if(c){c.each(function(f){if(this.value==d){a(this).attr("selected","selected");return false}})}},onEditorSubmit:function(j){var c=this.el.find(".editor-group select");var h=this;var g=this.el.find(".editor-series select");var f=g.map(function(){return a(this).val()});var d={series:a.makeArray(f),group:this.el.find(".editor-group select").val(),graphType:this.el.find(".editor-type select").val()};this.state.set(d)},addSeries:function(c){var e=_.extend({seriesIndex:c,seriesName:String.fromCharCode(c+64+1)},this.model.toTemplateJSON());var d=Mustache.render(this.templateSeriesEditor,e);this.el.find(".editor-series-group").append(d);return this},_onAddSeries:function(c){c.preventDefault();this.addSeries(this.state.get("series").length)},removeSeries:function(d){d.preventDefault();var c=a(d.target);c.parent().parent().remove();this.onEditorSubmit()}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Flotr2=Backbone.View.extend({template:'     <div class="recline-graph">       <div class="panel graph" style="display: block;">         <div class="js-temp-notice alert alert-block">           <h3 class="alert-heading">Hey there!</h3>           <p>There\'s no graph here yet because we don\'t know what fields you\'d like to see plotted.</p>           <p>Please tell us by <strong>using the menu on the right</strong> and a graph will automatically appear.</p>         </div>       </div>     </div> ',initialize:function(e){var d=this;this.graphColors=["#edc240","#afd8f8","#cb4b4b","#4da74d","#9440ed"];this.el=a(this.el);_.bindAll(this,"render","redraw");this.needToRedraw=false;this.model.bind("change",this.render);this.model.fields.bind("reset",this.render);this.model.fields.bind("add",this.render);this.model.records.bind("add",this.redraw);this.model.records.bind("reset",this.redraw);var c=_.extend({group:null,series:[],graphType:"lines-and-points"},e.state);this.state=new recline.Model.ObjectState(c);this.editor=new b.Flotr2Controls({model:this.model,state:this.state.toJSON()});this.editor.state.bind("change",function(){d.state.set(d.editor.state.toJSON());d.redraw()});this.elSidebar=this.editor.el},render:function(){var c=this;var d=this.model.toTemplateJSON();var e=Mustache.render(this.template,d);a(this.el).html(e);this.$graph=this.el.find(".panel.graph");return this},redraw:function(){var e=!jQuery.expr.filters.hidden(this.el[0]);if((!e||this.model.records.length===0)){this.needToRedraw=true;return}if(this.state.get("group")&&this.state.get("series")){this.$graph.width(this.el.width()-20);var d=this.createSeries();var c=this.getGraphOptions(this.state.attributes.graphType);this.plot=Flotr.draw(this.$graph.get(0),d,c)}},show:function(){if(this.needToRedraw){this.redraw()}},getGraphOptions:function(c){var m=this;var e=function(n){return l(n)};var d=function(r){var n=r.x;var s=r.y;if(m.state.attributes.graphType==="bars"){var o=n;n=s;s=o}n=l(n);var p=_.template("<%= group %> = <%= x %>, <%= series %> = <%= y %>",{group:m.state.attributes.group,x:n,series:r.series.label,y:s});return p};var l=function(o){var n=m.model.fields.get(m.state.attributes.group);var r=n.get("type");var p=(r==="date"||r==="date-time"||r==="time");if(m.model.records.models[parseInt(o)]){o=m.model.records.models[parseInt(o)].get(m.state.attributes.group);if(p){o=new Date(o).toLocaleDateString()}}else{if(p){o=new Date(parseInt(o)).toLocaleDateString()}}return o};var j={};j.tickFormatter=e;var g={};g.autoscale=true;g.autoscaleMargin=0.02;var f={};f.track=true;f.relative=true;f.trackFormatter=d;var h={};h.position="ne";var k={lines:{legend:h,colors:this.graphColors,lines:{show:true},xaxis:j,yaxis:g,mouse:f},points:{legend:h,colors:this.graphColors,points:{show:true,hitRadius:5},xaxis:j,yaxis:g,mouse:f,grid:{hoverable:true,clickable:true}},"lines-and-points":{legend:h,colors:this.graphColors,points:{show:true,hitRadius:5},lines:{show:true},xaxis:j,yaxis:g,mouse:f,grid:{hoverable:true,clickable:true}},bars:{legend:h,colors:this.graphColors,lines:{show:false},xaxis:g,yaxis:j,mouse:{track:true,relative:true,trackFormatter:d,fillColor:"#FFFFFF",fillOpacity:0.3,position:"e"},bars:{show:true,horizontal:true,shadowSize:0,barWidth:0.8}},columns:{legend:h,colors:this.graphColors,lines:{show:false},xaxis:j,yaxis:g,mouse:{track:true,relative:true,trackFormatter:d,fillColor:"#FFFFFF",fillOpacity:0.3,position:"n"},bars:{show:true,horizontal:false,shadowSize:0,barWidth:0.8}},grid:{hoverable:true,clickable:true}};if(m.state.get("graphOptions")){return _.extend(k[c],m.state.get("graphOptions"))}else{return k[c]}},createSeries:function(){var c=this;var d=[];_.each(this.state.attributes.series,function(f){var e=[];_.each(c.model.records.models,function(l,j){var h=c.model.fields.get(c.state.attributes.group);var g=l.getFieldValue(h);var o=h.get("type");var k=(o==="date"||o==="date-time"||o==="time");if(k){if(c.state.attributes.graphType!="bars"&&c.state.attributes.graphType!="columns"){g=new Date(g).getTime()}else{g=j}}else{if(typeof g==="string"){g=parseFloat(g);if(isNaN(g)){g=j}}}var n=c.model.fields.get(f);var m=l.getFieldValue(n);if(c.state.attributes.graphType=="bars"){e.push([m,g])}else{e.push([g,m])}});d.push({data:e,label:f,mouse:{lineColor:c.graphColors[d.length]}})});return d}});b.Flotr2Controls=Backbone.View.extend({className:"editor",template:'   <div class="editor">     <form class="form-stacked">       <div class="clearfix">         <label>Graph Type</label>         <div class="input editor-type">           <select>           <option value="lines-and-points">Lines and Points</option>           <option value="lines">Lines</option>           <option value="points">Points</option>           <option value="bars">Bars</option>           <option value="columns">Columns</option>           </select>         </div>         <label>Group Column (Axis 1)</label>         <div class="input editor-group">           <select>           <option value="">Please choose ...</option>           {{#fields}}           <option value="{{id}}">{{label}}</option>           {{/fields}}           </select>         </div>         <div class="editor-series-group">         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-add">Add Series</button>       </div>       <div class="editor-buttons editor-submit" comment="hidden temporarily" style="display: none;">         <button class="editor-save">Save</button>         <input type="hidden" class="editor-id" value="chart-1" />       </div>     </form>   </div> ',templateSeriesEditor:'     <div class="editor-series js-series-{{seriesIndex}}">       <label>Series <span>{{seriesName}} (Axis 2)</span>         [<a href="#remove" class="action-remove-series">Remove</a>]       </label>       <div class="input">         <select>         {{#fields}}         <option value="{{id}}">{{label}}</option>         {{/fields}}         </select>       </div>     </div>   ',events:{"change form select":"onEditorSubmit","click .editor-add":"_onAddSeries","click .action-remove-series":"removeSeries"},initialize:function(d){var c=this;this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("reset",this.render);this.model.fields.bind("add",this.render);this.state=new recline.Model.ObjectState(d.state);this.render()},render:function(){var d=this;var e=this.model.toTemplateJSON();var f=Mustache.render(this.template,e);this.el.html(f);if(this.state.get("graphType")){this._selectOption(".editor-type",this.state.get("graphType"))}if(this.state.get("group")){this._selectOption(".editor-group",this.state.get("group"))}var c=[""];if(this.state.get("series").length>0){c=this.state.get("series")}_.each(c,function(h,g){d.addSeries(g);d._selectOption(".editor-series.js-series-"+g,h)});return this},_selectOption:function(e,d){var c=this.el.find(e+" select > option");if(c){c.each(function(f){if(this.value==d){a(this).attr("selected","selected");return false}})}},onEditorSubmit:function(j){var c=this.el.find(".editor-group select");var h=this;var g=this.el.find(".editor-series select");var f=g.map(function(){return a(this).val()});var d={series:a.makeArray(f),group:this.el.find(".editor-group select").val(),graphType:this.el.find(".editor-type select").val()};this.state.set(d)},addSeries:function(c){var e=_.extend({seriesIndex:c,seriesName:String.fromCharCode(c+64+1)},this.model.toTemplateJSON());var d=Mustache.render(this.templateSeriesEditor,e);this.el.find(".editor-series-group").append(d);return this},_onAddSeries:function(c){c.preventDefault();this.addSeries(this.state.get("series").length)},removeSeries:function(d){d.preventDefault();var c=a(d.target);c.parent().parent().remove();this.onEditorSubmit()}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};this.recline.View.Graph=this.recline.View.Flot;this.recline.View.GraphControls=this.recline.View.FlotControls;this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Grid=Backbone.View.extend({tagName:"div",className:"recline-grid-container",initialize:function(d){var c=this;this.el=a(this.el);_.bindAll(this,"render","onHorizontalScroll");this.model.records.bind("add",this.render);this.model.records.bind("reset",this.render);this.model.records.bind("remove",this.render);this.tempState={};var e=_.extend({hiddenFields:[]},d.state);this.state=new recline.Model.ObjectState(e)},events:{},setColumnSort:function(c){var d=[{}];d[0][this.tempState.currentColumn]={order:c};this.model.query({sort:d})},hideColumn:function(){var c=this.state.get("hiddenFields");c.push(this.tempState.currentColumn);this.state.set({hiddenFields:c});this.state.trigger("change");this.render()},showColumn:function(d){var c=_.without(this.state.get("hiddenFields"),a(d.target).data("column"));this.state.set({hiddenFields:c});this.render()},onHorizontalScroll:function(d){var c=a(d.target).scrollLeft();this.el.find(".recline-grid thead tr").scrollLeft(c)},template:'     <div class="table-container">     <table class="recline-grid table-striped table-condensed" cellspacing="0">       <thead class="fixed-header">         <tr>           {{#fields}}             <th class="column-header {{#hidden}}hidden{{/hidden}}" data-field="{{id}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;" title="{{label}}">               <span class="column-header-name">{{label}}</span>             </th>           {{/fields}}           <th class="last-header" style="width: {{lastHeaderWidth}}px; max-width: {{lastHeaderWidth}}px; min-width: {{lastHeaderWidth}}px; padding: 0; margin: 0;"></th>         </tr>       </thead>       <tbody class="scroll-content"></tbody>     </table>     </div>   ',toTemplateJSON:function(){var c=this;var d=this.model.toJSON();d.notEmpty=(this.fields.length>0);d.fields=_.map(this.fields,function(e){return e.toJSON()});d.lastHeaderWidth=this.scrollbarDimensions.width-2;return d},render:function(){var e=this;this.fields=this.model.fields.filter(function(k){return _.indexOf(e.state.get("hiddenFields"),k.id)==-1});this.scrollbarDimensions=this.scrollbarDimensions||this._scrollbarSize();var d=this.fields.length;var j=e.el.width()-20-10*d-this.scrollbarDimensions.width;var f=parseInt(Math.max(50,j/d),10);var h=Math.max(j-d*f,0);_.each(this.fields,function(l,k){if(k===0){l.set({width:f+h})}else{l.set({width:f})}});var g=Mustache.render(this.template,this.toTemplateJSON());this.el.html(g);this.model.records.forEach(function(l){var k=a("<tr />");e.el.find("tbody").append(k);var m=new b.GridRow({model:l,el:k,fields:e.fields});m.render()});var c=this.el.find("tbody")[0];if(c.scrollHeight<=c.offsetHeight){this.el.find("th.last-header").hide()}this.el.find(".recline-grid").toggleClass("no-hidden",(e.state.get("hiddenFields").length===0));this.el.find(".recline-grid tbody").scroll(this.onHorizontalScroll);return this},_scrollbarSize:function(){var c=a("<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>").appendTo("body");var d={width:c.width()-c[0].clientWidth+1,height:c.height()-c[0].clientHeight};c.remove();return d}});b.GridRow=Backbone.View.extend({initialize:function(c){_.bindAll(this,"render");this._fields=c.fields;this.el=a(this.el);this.model.bind("change",this.render)},template:'       {{#cells}}       <td data-field="{{field}}" style="width: {{width}}px; max-width: {{width}}px; min-width: {{width}}px;">         <div class="data-table-cell-content">           <a href="javascript:{}" class="data-table-cell-edit" title="Edit this cell">&nbsp;</a>           <div class="data-table-cell-value">{{{value}}}</div>         </div>       </td>       {{/cells}}     ',events:{"click .data-table-cell-edit":"onEditClick","click .data-table-cell-editor .okButton":"onEditorOK","click .data-table-cell-editor .cancelButton":"onEditorCancel"},toTemplateJSON:function(){var d=this;var e=this.model;var c=this._fields.map(function(f){return{field:f.id,width:f.get("width"),value:e.getFieldValue(f)}});return{id:this.id,cells:c}},render:function(){this.el.attr("data-id",this.model.id);var c=Mustache.render(this.template,this.toTemplateJSON());a(this.el).html(c);return this},cellEditorTemplate:'     <div class="menu-container data-table-cell-editor">       <textarea class="data-table-cell-editor-editor" bind="textarea">{{value}}</textarea>       <div id="data-table-cell-editor-actions">         <div class="data-table-cell-editor-action">           <button class="okButton btn primary">Update</button>           <button class="cancelButton btn danger">Cancel</button>         </div>       </div>     </div>   ',onEditClick:function(g){var d=this.el.find(".data-table-cell-editor-editor");if(d.length>0){d.parents(".data-table-cell-value").html(d.text()).siblings(".data-table-cell-edit").removeClass("hidden")}a(g.target).addClass("hidden");var c=a(g.target).siblings(".data-table-cell-value");c.data("previousContents",c.text());var f=Mustache.render(this.cellEditorTemplate,{value:c.text()});c.html(f)},onEditorOK:function(k){var d=this;var c=a(k.target);var j=c.parents("tr").attr("data-id");var h=c.parents("td").attr("data-field");var g=c.parents(".data-table-cell-editor").find(".data-table-cell-editor-editor").val();var f={};f[h]=g;this.model.set(f);this.trigger("recline:flash",{message:"Updating row...",loader:true});this.model.save().then(function(e){this.trigger("recline:flash",{message:"Row updated successfully",category:"success"})}).fail(function(){this.trigger("recline:flash",{message:"Error saving row",category:"error",persist:true})})},onEditorCancel:function(d){var c=a(d.target).parents(".data-table-cell-value");c.html(c.data("previousContents")).siblings(".data-table-cell-edit").removeClass("hidden")}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Map=Backbone.View.extend({template:'     <div class="recline-map">       <div class="panel map"></div>     </div> ',latitudeFieldNames:["lat","latitude"],longitudeFieldNames:["lon","longitude"],geometryFieldNames:["geojson","geom","the_geom","geometry","spatial","location","geo","lonlat"],initialize:function(e){var d=this;this.el=a(this.el);this.visible=true;this.mapReady=false;this.map=null;var c=_.extend({geomField:null,lonField:null,latField:null,autoZoom:true,cluster:false},e.state);this.state=new recline.Model.ObjectState(c);this._clusterOptions={zoomToBoundsOnClick:true,maxClusterRadius:80,singleMarkerMode:false,skipDuplicateAddTesting:true,animateAddingMarkers:false};this.model.fields.bind("change",function(){d._setupGeometryField();d.render()});this.model.records.bind("add",function(f){d.redraw("add",f)});this.model.records.bind("change",function(f){d.redraw("remove",f);d.redraw("add",f)});this.model.records.bind("remove",function(f){d.redraw("remove",f)});this.model.records.bind("reset",function(){d.redraw("reset")});this.menu=new b.MapMenu({model:this.model,state:this.state.toJSON()});this.menu.state.bind("change",function(){d.state.set(d.menu.state.toJSON());d.redraw()});this.state.bind("change",function(){d.redraw()});this.elSidebar=this.menu.el},infobox:function(c){var d="";for(key in c.attributes){if(!(this.state.get("geomField")&&key==this.state.get("geomField"))){d+="<div><strong>"+key+"</strong>: "+c.attributes[key]+"</div>"}}return d},geoJsonLayerOptions:{pointToLayer:function(d,e){var c=new L.Marker(e);c.bindPopup(d.properties.popupContent);this.markers.addLayer(c);return c},onEachFeature:function(d,c){if(d.properties&&d.properties.popupContent){c.bindPopup(d.properties.popupContent)}}},render:function(){var c=this;htmls=Mustache.render(this.template,this.model.toTemplateJSON());a(this.el).html(htmls);this.$map=this.el.find(".panel.map");this.redraw();return this},redraw:function(f,h){var d=this;f=f||"refresh";if(!d._geomReady()){d._setupGeometryField()}if(!d.mapReady){d._setupMap()}if(this._geomReady()&&this.mapReady){this.map.removeLayer(this.features);this.map.removeLayer(this.markers);var e=0;this.features.eachLayer(function(){e++});if(f=="refresh"||f=="reset"){this.features.clearLayers();this.map.removeLayer(this.markers);this.markers=new L.MarkerClusterGroup(this._clusterOptions);this._add(this.model.records.models)}else{if(f=="add"&&h){this._add(h)}else{if(f=="remove"&&h){this._remove(h)}}}var g=0;this.features.eachLayer(function(){g++});var c=g-e>0;if(!this.state.get("cluster")&&g>64&&c){this.state.set({cluster:true});return}if(this.state.get("cluster")){this.map.addLayer(this.markers)}else{this.map.addLayer(this.features)}if(this.state.get("autoZoom")){if(this.visible){this._zoomToFeatures()}else{this._zoomPending=true}}}},show:function(){if(this.map){this.map.invalidateSize();if(this._zoomPending&&this.state.get("autoZoom")){this._zoomToFeatures();this._zoomPending=false}}this.visible=true},hide:function(){this.visible=false},_geomReady:function(){return Boolean(this.state.get("geomField")||(this.state.get("latField")&&this.state.get("lonField")))},_add:function(f){var c=this;if(!(f instanceof Array)){f=[f]}var d=0;var e=0;_.every(f,function(j){d+=1;var g=c._getGeometryFromRecord(j);if(typeof g==="undefined"||g===null){return true}else{if(g instanceof Object){g.properties={popupContent:c.infobox(j),cid:j.cid};try{c.features.addData(g)}catch(h){e+=1;var k="Wrong geometry value";if(h.message){k+=" ("+h.message+")"}if(e<=10){c.trigger("recline:flash",{message:k,category:"error"})}}}else{e+=1;if(e<=10){c.trigger("recline:flash",{message:"Wrong geometry value",category:"error"})}}}return true})},_remove:function(d){var c=this;if(!(d instanceof Array)){d=[d]}_.each(d,function(e){for(key in c.features._layers){if(c.features._layers[key].feature.properties.cid==e.cid){c.features.removeLayer(c.features._layers[key])}}})},_getGeometryFromRecord:function(h){if(this.state.get("geomField")){var c=h.get(this.state.get("geomField"));if(typeof(c)==="string"){try{c=a.parseJSON(c)}catch(g){}}if(typeof(c)==="string"){c=c.replace("(","").replace(")","");var f=c.split(",");var d=parseFloat(f[0]);var j=parseFloat(f[1]);if(!isNaN(j)&&!isNaN(parseFloat(d))){return{type:"Point",coordinates:[j,d]}}else{return null}}else{if(c&&_.isArray(c)){return{type:"Point",coordinates:[c[0],c[1]]}}else{if(c&&c.lat){return{type:"Point",coordinates:[c.lon||c.lng,c.lat]}}}}return c}else{if(this.state.get("lonField")&&this.state.get("latField")){var j=h.get(this.state.get("lonField"));var d=h.get(this.state.get("latField"));if(!isNaN(parseFloat(j))&&!isNaN(parseFloat(d))){return{type:"Point",coordinates:[j,d]}}}}return null},_setupGeometryField:function(){if(!this._geomReady()){this.state.set({geomField:this._checkField(this.geometryFieldNames),latField:this._checkField(this.latitudeFieldNames),lonField:this._checkField(this.longitudeFieldNames)});this.menu.state.set(this.state.toJSON())}},_checkField:function(g){var f;var e=this.model.fields.pluck("id");for(var d=0;d<g.length;d++){for(var c=0;c<e.length;c++){if(e[c].toLowerCase()==g[d].toLowerCase()){return e[c]}}}return null},_zoomToFeatures:function(){var c=this.features.getBounds();if(c&&c.getNorthEast()&&c.getSouthWest()){this.map.fitBounds(c)}else{this.map.setView([0,0],2)}},_setupMap:function(){var e=this;var j="http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png";var h=new L.TileLayer(j,{maxZoom:18,subdomains:"1234"});var f=new L.Google("SATELLITE");var g=new L.Google("ROADMAP");var k=new L.Google("HYBRID");var d=new L.Google("TERRAIN");this.map=new L.Map(this.$map.get(0),{layers:[g,f,k,d,h],center:new L.LatLng(24.0476,121.5171),zoom:7});var c={"一般地圖":g,"衛星圖":f,"混合地圖":k,"地理資訊地圖":d,OpenStreetMap:h};L.control.layers(c).addTo(this.map);this.markers=new L.MarkerClusterGroup(this._clusterOptions);this.geoJsonLayerOptions.pointToLayer=_.bind(this.geoJsonLayerOptions.pointToLayer,this);this.features=new L.GeoJSON(null,this.geoJsonLayerOptions);this.mapReady=true},_selectOption:function(e,d){var c=a("."+e+" > select > option");if(c){c.each(function(f){if(this.value==d){a(this).attr("selected","selected");return false}})}}});b.MapMenu=Backbone.View.extend({className:"editor",template:'     <form class="form-stacked">       <div class="clearfix">         <div class="editor-field-type">             <label class="radio">               <input type="radio" id="editor-field-type-latlon" name="editor-field-type" value="latlon" checked="checked"/>               Latitude / Longitude fields</label>             <label class="radio">               <input type="radio" id="editor-field-type-geom" name="editor-field-type" value="geom" />               GeoJSON field</label>         </div>         <div class="editor-field-type-latlon">           <label>Latitude field</label>           <div class="input editor-lat-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>           <label>Longitude field</label>           <div class="input editor-lon-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>         <div class="editor-field-type-geom" style="display:none">           <label>Geometry field (GeoJSON)</label>           <div class="input editor-geom-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-update-map">Update</button>       </div>       <div class="editor-options" >         <label class="checkbox">           <input type="checkbox" id="editor-auto-zoom" value="autozoom" checked="checked" />           Auto zoom to features</label>         <label class="checkbox">           <input type="checkbox" id="editor-cluster" value="cluster"/>           Cluster markers</label>       </div>       <input type="hidden" class="editor-id" value="map-1" />     </form>   ',events:{"click .editor-update-map":"onEditorSubmit","change .editor-field-type":"onFieldTypeChange","click #editor-auto-zoom":"onAutoZoomChange","click #editor-cluster":"onClusteringChange"},initialize:function(d){var c=this;this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("change",this.render);this.state=new recline.Model.ObjectState(d.state);this.state.bind("change",this.render);this.render()},render:function(){var c=this;htmls=Mustache.render(this.template,this.model.toTemplateJSON());a(this.el).html(htmls);if(this._geomReady()&&this.model.fields.length){if(this.state.get("geomField")){this._selectOption("editor-geom-field",this.state.get("geomField"));this.el.find("#editor-field-type-geom").attr("checked","checked").change()}else{this._selectOption("editor-lon-field",this.state.get("lonField"));this._selectOption("editor-lat-field",this.state.get("latField"));this.el.find("#editor-field-type-latlon").attr("checked","checked").change()}}if(this.state.get("autoZoom")){this.el.find("#editor-auto-zoom").attr("checked","checked")}else{this.el.find("#editor-auto-zoom").removeAttr("checked")}if(this.state.get("cluster")){this.el.find("#editor-cluster").attr("checked","checked")}else{this.el.find("#editor-cluster").removeAttr("checked")}return this},_geomReady:function(){return Boolean(this.state.get("geomField")||(this.state.get("latField")&&this.state.get("lonField")))},onEditorSubmit:function(c){c.preventDefault();if(this.el.find("#editor-field-type-geom").attr("checked")){this.state.set({geomField:this.el.find(".editor-geom-field > select > option:selected").val(),lonField:null,latField:null})}else{this.state.set({geomField:null,lonField:this.el.find(".editor-lon-field > select > option:selected").val(),latField:this.el.find(".editor-lat-field > select > option:selected").val()})}return false},onFieldTypeChange:function(c){if(c.target.value=="geom"){this.el.find(".editor-field-type-geom").show();this.el.find(".editor-field-type-latlon").hide()}else{this.el.find(".editor-field-type-geom").hide();this.el.find(".editor-field-type-latlon").show()}},onAutoZoomChange:function(c){this.state.set({autoZoom:!this.state.get("autoZoom")})},onClusteringChange:function(c){this.state.set({cluster:!this.state.get("cluster")})},_selectOption:function(e,d){var c=this.el.find("."+e+" > select > option");if(c){c.each(function(f){if(this.value==d){a(this).attr("selected","selected");return false}})}}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(b,c){c.MultiView=Backbone.View.extend({template:'   <div class="recline-data-explorer">     <div class="alert-messages"></div>         <div class="header clearfix">       <div class="navigation">         <div class="btn-group" data-toggle="buttons-radio">         {{#views}}         <a href="#{{id}}" data-view="{{id}}" class="btn">{{label}}</a>         {{/views}}         </div>       </div>       <div class="recline-results-info">         <span class="doc-count">{{recordCount}}</span> records      </div>       <div class="menu-right">         <div class="btn-group" data-toggle="buttons-checkbox">           {{#sidebarViews}}           <a href="#" data-action="{{id}}" class="btn">{{label}}</a>           {{/sidebarViews}}         </div>       </div>       <div class="query-editor-here" style="display:inline;"></div>     </div>     <div class="data-view-sidebar"></div>     <div class="data-view-container"></div>   </div>   ',events:{"click .menu-right a":"_onMenuClick","click .navigation a":"_onSwitchView"},initialize:function(e){var d=this;this.el=b(this.el);this._setupState(e.state);if(e.views){this.pageViews=e.views}else{this.pageViews=[{id:"grid",label:"Grid",view:new c.SlickGrid({model:this.model,state:this.state.get("view-grid")})},{id:"graph",label:"Graph",view:new c.Graph({model:this.model,state:this.state.get("view-graph")})},{id:"map",label:"Map",view:new c.Map({model:this.model,state:this.state.get("view-map")})},{id:"timeline",label:"Timeline",view:new c.Timeline({model:this.model,state:this.state.get("view-timeline")})},{id:"transform",label:"Transform",view:new c.Transform({model:this.model})}]}if(e.sidebarViews){this.sidebarViews=e.sidebarViews}else{this.sidebarViews=[{id:"filterEditor",label:"Filters",view:new c.FilterEditor({model:this.model})},{id:"fieldsView",label:"Fields",view:new c.Fields({model:this.model})}]}this.render();this._bindStateChanges();this._bindFlashNotifications();if(this.state.get("readOnly")){this.setReadOnly()}if(this.state.get("currentView")){this.updateNav(this.state.get("currentView"))}else{this.updateNav(this.pageViews[0].id)}this._showHideSidebar();this.model.bind("query:start",function(){d.notify({loader:true,persist:true})});this.model.bind("query:done",function(){d.clearNotifications();d.el.find(".doc-count").text(d.model.recordCount||"Unknown")});this.model.bind("query:fail",function(f){d.clearNotifications();var g="";if(typeof(f)=="string"){g=f}else{if(typeof(f)=="object"){if(f.title){g=f.title+": "}if(f.message){g+=f.message}}else{g="There was an error querying the backend"}}d.notify({message:g,category:"error",persist:true})});this.model.queryState.set(d.state.get("query"),{silent:true});this.model.fetch().fail(function(f){d.notify({message:f.message,category:"error",persist:true})})},setReadOnly:function(){this.el.addClass("recline-read-only")},render:function(){var g=this.model.toTemplateJSON();g.views=this.pageViews;g.sidebarViews=this.sidebarViews;var h=Mustache.render(this.template,g);b(this.el).html(h);var d=this.el.find(".data-view-container");var j=this.el.find(".data-view-sidebar");_.each(this.pageViews,function(l,k){l.view.render();d.append(l.view.el);if(l.view.elSidebar){j.append(l.view.elSidebar)}});_.each(this.sidebarViews,function(k){this["$"+k.id]=k.view.el;j.append(k.view.el)},this);var f=new recline.View.Pager({model:this.model.queryState});this.el.find(".recline-results-info").after(f.el);var e=new recline.View.QueryEditor({model:this.model.queryState});this.el.find(".query-editor-here").append(e.el)},_showHideSidebar:function(){var e=this.el.find(".data-view-sidebar");var d=e.children().filter(function(){return b(this).css("display")!="none"}).length;if(d>0){e.show()}else{e.hide()}},updateNav:function(d){this.el.find(".navigation a").removeClass("active");var e=this.el.find('.navigation a[data-view="'+d+'"]');e.addClass("active");_.each(this.pageViews,function(g,f){if(g.id===d){g.view.el.show();if(g.view.elSidebar){g.view.elSidebar.show()}}else{g.view.el.hide();if(g.view.elSidebar){g.view.elSidebar.hide()}if(g.view.hide){g.view.hide()}}});this._showHideSidebar();_.each(this.pageViews,function(g,f){if(g.id===d){if(g.view.show){g.view.show()}}})},_onMenuClick:function(f){f.preventDefault();var d=b(f.target).attr("data-action");this["$"+d].toggle();this._showHideSidebar()},_onSwitchView:function(d){d.preventDefault();var f=b(d.target).attr("data-view");this.updateNav(f);this.state.set({currentView:f})},_setupState:function(g){var h=this;var f=c.parseHashQueryString();var j=f.reclineQuery;j=j?JSON.parse(j):h.model.queryState.toJSON();var e=f["view-graph"]||f.graph;e=e?JSON.parse(e):{};var d=_.extend({query:j,"view-graph":e,backend:this.model.backend.__type__,url:this.model.get("url"),dataset:this.model.toJSON(),currentView:null,readOnly:false},g);this.state=new recline.Model.ObjectState(d)},_bindStateChanges:function(){var d=this;this.model.queryState.bind("change",function(){d.state.set({query:d.model.queryState.toJSON()})});_.each(this.pageViews,function(e){if(e.view.state&&e.view.state.bind){var f={};f["view-"+e.id]=e.view.state.toJSON();d.state.set(f);e.view.state.bind("change",function(){var g={};g["view-"+e.id]=e.view.state.toJSON();d.state.set(g,{silent:true});d.state.trigger("change")})}})},_bindFlashNotifications:function(){var d=this;_.each(this.pageViews,function(e){e.view.bind("recline:flash",function(f){d.notify(f)})})},notify:function(e){var d=_.extend({message:"Loading",category:"warning",loader:false},e);var f;if(d.loader){f='         <div class="alert alert-info alert-loader">           {{message}}           <span class="notification-loader">&nbsp;</span>         </div>'}else{f='         <div class="alert alert-{{category}} fade in" data-alert="alert"><a class="close" data-dismiss="alert" href="#">×</a>           {{message}}         </div>'}var g=b(Mustache.render(f,d));g=b(g).appendTo(b(".recline-data-explorer .alert-messages"));if(!e.persist){setTimeout(function(){b(g).fadeOut(1000,function(){b(this).remove()})},1000)}},clearNotifications:function(){var d=b(".recline-data-explorer .alert-messages .alert");d.fadeOut(1500,function(){b(this).remove()})}});c.MultiView.restore=function(f){var d;if(f.backend==="memory"){d={backend:"memory",records:[{stub:"this is a stub dataset because we do not restore memory datasets"}]}}else{d=_.extend({url:f.url,backend:f.backend},f.dataset)}var g=new recline.Model.Dataset(d);var e=new c.MultiView({model:g,state:f});return e};var a=/^([^?]+)(\?.*)?/;c.parseHashUrl=function(e){var d=a.exec(e);if(d===null){return{}}else{return{path:d[1],query:d[2]||""}}};c.parseQueryString=function(h){if(!h){return{}}var f={},j,k=function(d){return unescape(d.replace(/\+/g," "))},g=/([^&=]+)=?([^&]*)/g;if(h&&h.length&&h[0]==="?"){h=h.slice(1)}while(j=g.exec(h)){f[k(j[1])]=k(j[2])}return f};c.parseHashQueryString=function(){q=c.parseHashUrl(window.location.hash).query;return c.parseQueryString(q)};c.composeQueryString=function(e){var f="?";var d=[];b.each(e,function(g,h){if(typeof(h)==="object"){h=JSON.stringify(h)}d.push(g+"="+encodeURIComponent(h))});f+=d.join("&");return f};c.getNewHashForQueryString=function(d){var e=c.composeQueryString(d);if(window.location.hash){return window.location.hash.split("?")[0].slice(1)+e}else{return e}};c.setHashQueryString=function(d){window.location.hash=c.getNewHashForQueryString(d)}})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.SlickGrid=Backbone.View.extend({initialize:function(d){var c=this;this.el=a(this.el);this.el.addClass("recline-slickgrid");_.bindAll(this,"render");this.model.records.bind("add",this.render);this.model.records.bind("reset",this.render);this.model.records.bind("remove",this.render);this.model.records.bind("change",this.onRecordChanged,this);var e=_.extend({hiddenColumns:[],columnsOrder:[],columnsSort:{},columnsWidth:[],columnsEditor:[],options:{},fitColumns:false},d.state);this.state=new recline.Model.ObjectState(e)},events:{},onRecordChanged:function(c){if(!this.grid){return}var d=this.grid.getData().getModelRow(c);this.grid.invalidateRow(d);this.grid.getData().updateItem(c,d);this.grid.render()},render:function(){var o=this;var r=_.extend({enableCellNavigation:true,enableColumnReorder:true,explicitInitialization:true,syncColumnCellResize:true,forceFitColumns:this.state.get("fitColumns")},o.state.get("gridOptions"));var f=[];var m=function(x,t,v,u,s){var w=o.model.fields.get(u.id);if(w.renderer){return w.renderer(v,w,s)}else{return v}};_.each(this.model.fields.toJSON(),function(v){var t={id:v.id,name:v.label,field:v.id,sortable:true,minWidth:80,formatter:m};var s=_.find(o.state.get("columnsWidth"),function(w){return w.column===v.id});if(s){t.width=s.width}var u=_.find(o.state.get("columnsEditor"),function(w){return w.column===v.id});if(u){t.editor=u.editor}f.push(t)});var l=f.filter(function(s){return _.indexOf(o.state.get("hiddenColumns"),s.id)===-1});if(this.state.get("columnsOrder")&&this.state.get("columnsOrder").length>0){l=l.sort(function(t,s){return _.indexOf(o.state.get("columnsOrder"),t.id)>_.indexOf(o.state.get("columnsOrder"),s.id)?1:-1});f=f.sort(function(t,s){return _.indexOf(o.state.get("columnsOrder"),t.id)>_.indexOf(o.state.get("columnsOrder"),s.id)?1:-1})}var d=[];for(var k=f.length-1;k>=0;k--){if(_.indexOf(_.pluck(l,"id"),f[k].id)===-1){d.push(f.splice(k,1)[0])}}f=f.concat(d);function p(s){var t={};o.model.fields.each(function(u){t[u.id]=s.getFieldValueUnrendered(u)});return t}function h(){var t=[];var s=[];this.push=function(u,v){t.push(u);s.push(v)};this.getLength=function(){return s.length};this.getItem=function(u){return s[u]};this.getItemMetadata=function(u){return{}};this.getModel=function(u){return t[u]};this.getModelRow=function(u){return t.indexOf(u)};this.updateItem=function(u,v){s[v]=p(u);t[v]=u}}var j=new h();this.model.records.each(function(s){j.push(s,p(s))});this.grid=new Slick.Grid(this.el,j,l,r);var n=this.model.queryState.get("sort");if(n){var e=n[0].field;var c=n[0].order!=="desc";this.grid.setSortColumn(e,c)}this.grid.onSort.subscribe(function(v,t){var s=(t.sortAsc)?"asc":"desc";var u=[{field:t.sortCol.field,order:s}];o.model.query({sort:u})});this.grid.onColumnsReordered.subscribe(function(t,s){o.state.set({columnsOrder:_.pluck(o.grid.getColumns(),"id")})});this.grid.onColumnsResized.subscribe(function(v,s){var t=s.grid.getColumns();var w=s.grid.getOptions().defaultColumnWidth;var u=[];_.each(t,function(x){if(x.width!=w){u.push({column:x.id,width:x.width})}});o.state.set({columnsWidth:u})});this.grid.onCellChange.subscribe(function(y,u){var w=u.grid;var t=j.getModel(u.row);var x=w.getColumns()[u.cell].id;var s={};s[x]=u.item[x];t.set(s)});var g=new Slick.Controls.ColumnPicker(f,this.grid,_.extend(r,{state:this.state}));if(o.visible){o.grid.init();o.rendered=true}else{o.rendered=false}return this},show:function(){if(!this.rendered){if(!this.grid){this.render()}this.grid.init();this.rendered=true}this.visible=true},hide:function(){this.visible=false}})})(jQuery,recline.View);(function(b){function a(g,e,l){var d;var f;var h={fadeSpeed:250};function k(){e.onHeaderContextMenu.subscribe(c);l=b.extend({},h,l);d=b('<ul class="dropdown-menu slick-contextmenu" style="display:none;position:absolute;z-index:20;" />').appendTo(document.body);d.bind("mouseleave",function(m){b(this).fadeOut(l.fadeSpeed)});d.bind("click",j)}function c(o,m){o.preventDefault();d.empty();f=[];var r,p;for(var n=0;n<g.length;n++){r=b("<li />").appendTo(d);p=b('<input type="checkbox" />').data("column-id",g[n].id).attr("id","slick-column-vis-"+g[n].id);f.push(p);if(e.getColumnIndex(g[n].id)!==null){p.attr("checked","checked")}p.appendTo(r);b("<label />").text(g[n].name).attr("for","slick-column-vis-"+g[n].id).appendTo(r)}b("<li/>").addClass("divider").appendTo(d);r=b("<li />").data("option","autoresize").appendTo(d);p=b('<input type="checkbox" />').data("option","autoresize").attr("id","slick-option-autoresize");p.appendTo(r);b("<label />").text("Force fit columns").attr("for","slick-option-autoresize").appendTo(r);if(e.getOptions().forceFitColumns){p.attr("checked","checked")}d.css("top",o.pageY-10).css("left",o.pageX-10).fadeIn(l.fadeSpeed)}function j(r){var p;if(b(r.target).data("option")==="autoresize"){var o;if(b(r.target).is("li")){p=b(r.target).find("input").first();o=!p.is(":checked");p.attr("checked",o)}else{o=r.target.checked}if(o){e.setOptions({forceFitColumns:true});e.autosizeColumns()}else{e.setOptions({forceFitColumns:false})}l.state.set({fitColumns:o});return}if((b(r.target).is("li")&&!b(r.target).hasClass("divider"))||b(r.target).is("input")){if(b(r.target).is("li")){p=b(r.target).find("input").first();p.attr("checked",!p.is(":checked"))}var n=[];var m=[];b.each(f,function(s,t){if(b(this).is(":checked")){n.push(g[s])}else{m.push(g[s].id)}});if(!n.length){b(r.target).attr("checked","checked");return}e.setColumns(n);l.state.set({hiddenColumns:m})}}k()}b.extend(true,window,{Slick:{Controls:{ColumnPicker:a}}})})(jQuery);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){if(typeof VMM!=="undefined"){VMM.debug=false}b.Timeline=Backbone.View.extend({template:'     <div class="recline-timeline">       <div id="vmm-timeline-id"></div>     </div>   ',startFieldNames:["date","startdate","start","start-date"],endFieldNames:["end","endDate"],elementId:"#vmm-timeline-id",initialize:function(e){var d=this;this.el=a(this.el);this.timeline=new VMM.Timeline();this._timelineIsInitialized=false;this.model.fields.bind("reset",function(){d._setupTemporalField()});this.model.records.bind("all",function(){d.reloadData()});var c=_.extend({startField:null,endField:null,timelineJSOptions:{}},e.state);this.state=new recline.Model.ObjectState(c);this._setupTemporalField()},render:function(){var c={};var d=Mustache.render(this.template,c);this.el.html(d);if(a(this.elementId).length>0){this._initTimeline()}},show:function(){if(this._timelineIsInitialized===false){this._initTimeline()}},_initTimeline:function(){var c=this.el.find(this.elementId);var d=Math.max(this.el.width(),this.el.find(".recline-timeline").width());if(d){c.width(d)}var e=this._timelineJSON();this.timeline.init(e,this.elementId,this.state.get("timelineJSOptions"));this._timelineIsInitialized=true},reloadData:function(){if(this._timelineIsInitialized){var c=this._timelineJSON();this.timeline.reload(c)}},convertRecord:function(d,c){return this._convertRecord(d,c)},_convertRecord:function(e,c){var g=this._parseDate(e.get(this.state.get("startField")));var d=this._parseDate(e.get(this.state.get("endField")));if(g){var f={startDate:g,endDate:d,headline:String(e.get("title")||""),text:e.get("description")||e.summary()};return f}else{return null}},_timelineJSON:function(){var c=this;var e={timeline:{type:"default",headline:"",date:[]}};this.model.records.each(function(f){var g=c.convertRecord(f,c.fields);if(g){e.timeline.date.push(g)}});if(e.timeline.date.length===0){var d={startDate:"2000,1,1",headline:"No data to show!"};e.timeline.date.push(d)}return e},_parseDate:function(d){if(!d){return null}var c=d.trim();c=c.replace(/(\d)th/g,"$1");c=c.replace(/(\d)st/g,"$1");c=c.trim()?moment(c):null;if(c.toDate()=="Invalid Date"){return null}else{return c.toDate()}},_setupTemporalField:function(){this.state.set({startField:this._checkField(this.startFieldNames),endField:this._checkField(this.endFieldNames)})},_checkField:function(c){var f=this.model.fields.pluck("id");for(var e=0;e<c.length;e++){for(var d=0;d<f.length;d++){if(f[d].toLowerCase()==c[e].toLowerCase()){return f[d]}}}return null}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Transform=Backbone.View.extend({template:'     <div class="recline-transform">       <div class="script">         <h2>           Transform Script           <button class="okButton btn btn-primary">Run on all records</button>         </h2>         <textarea class="expression-preview-code"></textarea>       </div>       <div class="expression-preview-parsing-status">         No syntax error.       </div>       <div class="preview">         <h3>Preview</h3>         <div class="expression-preview-container"></div>       </div>     </div>   ',events:{"click .okButton":"onSubmit","keydown .expression-preview-code":"onEditorKeydown"},initialize:function(c){this.el=a(this.el)},render:function(){var e=Mustache.render(this.template);this.el.html(e);var d=this.el.find(".expression-preview-code");if(this.model.fields.length>0){var c=this.model.fields.models[0].id}else{var c="unknown"}d.val("function(doc) {\n  doc['"+c+"'] = doc['"+c+"'];\n  return doc;\n}");d.keydown()},onSubmit:function(g){var c=this;var d=this.el.find(".expression-preview-code").val();var f=recline.Data.Transform.evalFunction(d);if(f.errorMessage){this.trigger("recline:flash",{message:"Error with function! "+f.errorMessage});return}this.model.transform(f)},editPreviewTemplate:'       <table class="table table-condensed table-bordered before-after">       <thead>       <tr>         <th>Field</th>         <th>Before</th>         <th>After</th>       </tr>       </thead>       <tbody>       {{#row}}       <tr>         <td>           {{field}}         </td>         <td class="before {{#different}}different{{/different}}">           {{before}}         </td>         <td class="after {{#different}}different{{/different}}">           {{after}}         </td>       </tr>       {{/row}}       </tbody>       </table>   ',onEditorKeydown:function(d){var c=this;window.setTimeout(function(){var l=c.el.find(".expression-preview-parsing-status");var h=recline.Data.Transform.evalFunction(d.target.value);if(!h.errorMessage){l.text("No syntax error.");var k=c.model.records.map(function(m){return m.toJSON()});var f=recline.Data.Transform.previewTransform(k,h);var g=c.el.find(".expression-preview-container");var e=c.model.fields.toJSON();var j=_.map(f.slice(0,4),function(m){return _.map(e,function(n){return{field:n.id,before:m.before[n.id],after:m.after[n.id],different:!_.isEqual(m.before[n.id],m.after[n.id])}})});g.html("");_.each(j,function(n){var m=Mustache.render(c.editPreviewTemplate,{row:n});g.append(m)})}else{l.text(h.errorMessage)}},1,true)}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.FacetViewer=Backbone.View.extend({className:"recline-facet-viewer",template:'     <div class="facets">       {{#facets}}       <div class="facet-summary" data-facet="{{id}}">         <h3>           {{id}}         </h3>         <ul class="facet-items">         {{#terms}}           <li><a class="facet-choice js-facet-filter" data-value="{{term}}" href="#{{term}}">{{term}} ({{count}})</a></li>         {{/terms}}         {{#entries}}           <li><a class="facet-choice js-facet-filter" data-value="{{time}}">{{term}} ({{count}})</a></li>         {{/entries}}         </ul>       </div>       {{/facets}}     </div>   ',events:{"click .js-facet-filter":"onFacetFilter"},initialize:function(c){_.bindAll(this,"render");this.el=a(this.el);this.model.facets.bind("all",this.render);this.model.fields.bind("all",this.render);this.render()},render:function(){var c={fields:this.model.fields.toJSON()};c.facets=_.map(this.model.facets.toJSON(),function(e){if(e._type==="date_histogram"){e.entries=_.map(e.entries,function(f){f.term=new Date(f.time).toDateString();return f})}return e});var d=Mustache.render(this.template,c);this.el.html(d);if(this.model.facets.length>0){this.el.show()}else{this.el.hide()}},onHide:function(c){c.preventDefault();this.el.hide()},onFacetFilter:function(g){g.preventDefault();var c=a(g.target);var d=c.closest(".facet-summary").attr("data-facet");var f=c.attr("data-value");this.model.queryState.addFilter({type:"term",field:d,term:f});this.model.query()}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Fields=Backbone.View.extend({className:"recline-fields-view",template:'     <div class="accordion fields-list well">     <h3>Fields <a href="#" class="js-show-hide">+</a></h3>     {{#fields}}       <div class="accordion-group field">         <div class="accordion-heading">           <i class="icon-file"></i>           <h4>             {{label}}             <small>               {{type}}               <a class="accordion-toggle" data-toggle="collapse" href="#collapse{{id}}"> &raquo; </a>             </small>           </h4>         </div>         <div id="collapse{{id}}" class="accordion-body collapse">           <div class="accordion-inner">             {{#facets}}             <div class="facet-summary" data-facet="{{id}}">               <ul class="facet-items">               {{#terms}}                 <li class="facet-item"><span class="term">{{term}}</span> <span class="count">[{{count}}]</span></li>               {{/terms}}               </ul>             </div>             {{/facets}}             <div class="clear"></div>           </div>         </div>       </div>     {{/fields}}     </div>   ',initialize:function(d){var c=this;this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("reset",function(e){c.model.fields.each(function(f){f.facets.unbind("all",c.render);f.facets.bind("all",c.render)});c.model.getFieldsSummary();c.render()});this.el.find(".collapse").collapse();this.render()},render:function(){var c=this;var d={fields:[]};this.model.fields.each(function(g){var f=g.toJSON();f.facets=g.facets.toJSON();d.fields.push(f)});var e=Mustache.render(this.template,d);this.el.html(e)}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.FilterEditor=Backbone.View.extend({className:"recline-filter-editor well",template:'     <div class="filters">       <h3>Filters</h3>       <a href="#" class="js-add-filter">Add filter</a>       <form class="form-stacked js-add" style="display: none;">         <fieldset>           <label>Field</label>           <select class="fields">             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}           </select>           <label>Filter type</label>           <select class="filterType">             <option value="term">Value</option>             <option value="range">Range</option>             <option value="geo_distance">Geo distance</option>           </select>           <button type="submit" class="btn">Add</button>         </fieldset>       </form>       <form class="form-stacked js-edit">         {{#filters}}           {{{filterRender}}}         {{/filters}}         {{#filters.length}}         <button type="submit" class="btn">Update</button>         {{/filters.length}}       </form>     </div>   ',filterTemplates:{term:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}</small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;</a>           </legend>           <input type="text" value="{{term}}" name="term" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     ',range:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}</small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;</a>           </legend>           <label class="control-label" for="">From</label>           <input type="text" value="{{start}}" name="start" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">To</label>           <input type="text" value="{{stop}}" name="stop" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     ',geo_distance:'       <div class="filter-{{type}} filter">         <fieldset>           <legend>             {{field}} <small>{{type}}</small>             <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;</a>           </legend>           <label class="control-label" for="">Longitude</label>           <input type="text" value="{{point.lon}}" name="lon" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Latitude</label>           <input type="text" value="{{point.lat}}" name="lat" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />           <label class="control-label" for="">Distance (km)</label>           <input type="text" value="{{distance}}" name="distance" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     '},events:{"click .js-remove-filter":"onRemoveFilter","click .js-add-filter":"onAddFilterShow","submit form.js-edit":"onTermFiltersUpdate","submit form.js-add":"onAddFilter"},initialize:function(){this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("all",this.render);this.model.queryState.bind("change",this.render);this.model.queryState.bind("change:filters:new-blank",this.render);this.render()},render:function(){var c=this;var e=a.extend(true,{},this.model.queryState.toJSON());e.filters=_.map(e.filters,function(g,f){g.id=f;return g});e.fields=this.model.fields.toJSON();e.filterRender=function(){return Mustache.render(c.filterTemplates[this.type],this)};var d=Mustache.render(this.template,e);this.el.html(d)},onAddFilterShow:function(d){d.preventDefault();var c=a(d.target);c.hide();this.el.find("form.js-add").show()},onAddFilter:function(g){g.preventDefault();var c=a(g.target);c.hide();var d=c.find("select.filterType").val();var f=c.find("select.fields").val();this.model.queryState.addFilter({type:d,field:f})},onRemoveFilter:function(f){f.preventDefault();var c=a(f.target);var d=c.attr("data-filter-id");this.model.queryState.removeFilter(d)},onTermFiltersUpdate:function(g){var d=this;g.preventDefault();var f=d.model.queryState.get("filters");var c=a(g.target);_.each(c.find("input"),function(h){var n=a(h);var l=n.attr("data-filter-type");var e=n.attr("data-filter-field");var k=parseInt(n.attr("data-filter-id"),10);var j=n.attr("name");var m=n.val();switch(l){case"term":f[k].term=m;break;case"range":f[k][j]=m;break;case"geo_distance":if(j==="distance"){f[k].distance=parseFloat(m)}else{f[k].point[j]=parseFloat(m)}break}});d.model.queryState.set({filters:f,from:0});d.model.queryState.trigger("change")}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.Pager=Backbone.View.extend({className:"recline-pager",template:'     <div class="pagination">       <ul>         <li class="prev action-pagination-update"><a href="">&laquo;</a></li>         <li class="active"><a><input name="from" type="text" value="{{from}}" /> &ndash; <input name="to" type="text" value="{{to}}" /> </a></li>         <li class="next action-pagination-update"><a href="">&raquo;</a></li>       </ul>     </div>   ',events:{"click .action-pagination-update":"onPaginationUpdate","change input":"onFormSubmit"},initialize:function(){_.bindAll(this,"render");this.el=a(this.el);this.model.bind("change",this.render);this.render()},onFormSubmit:function(f){f.preventDefault();var d=parseInt(this.el.find('input[name="from"]').val());var c=parseInt(this.el.find('input[name="to"]').val())-d;d=Math.max(d,0);c=Math.max(c,1);this.model.set({size:c,from:d})},onPaginationUpdate:function(f){f.preventDefault();var c=a(f.target);var d=0;if(c.parent().hasClass("prev")){d=this.model.get("from")-Math.max(0,this.model.get("size"))}else{d=this.model.get("from")+this.model.get("size")}d=Math.max(d,0);this.model.set({from:d})},render:function(){var c=this.model.toJSON();c.to=this.model.get("from")+this.model.get("size");var d=Mustache.render(this.template,c);this.el.html(d)}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.QueryEditor=Backbone.View.extend({className:"recline-query-editor",template:'     <form action="" method="GET" class="form-inline">       <div class="input-prepend text-query">         <span class="add-on"><i class="icon-search"></i></span>         <input type="text" name="q" value="{{q}}" class="span2" placeholder="Search data ..." class="search-query" />       </div>       <button type="submit" class="btn">Go &raquo;</button>     </form>   ',events:{"submit form":"onFormSubmit"},initialize:function(){_.bindAll(this,"render");this.el=a(this.el);this.model.bind("change",this.render);this.render()},onFormSubmit:function(d){d.preventDefault();var c=this.el.find(".text-query input").val();this.model.set({q:c})},render:function(){var c=this.model.toJSON();var d=Mustache.render(this.template,c);this.el.html(d)}})})(jQuery,recline.View);this.recline=this.recline||{};this.recline.View=this.recline.View||{};(function(a,b){b.ValueFilter=Backbone.View.extend({className:"recline-filter-editor well",template:'     <div class="filters">       <h3>Filters</h3>       <button class="btn js-add-filter add-filter">Add filter</button>       <form class="form-stacked js-add" style="display: none;">         <fieldset>           <label>Field</label>           <select class="fields">             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}           </select>           <button type="submit" class="btn">Add</button>         </fieldset>       </form>       <form class="form-stacked js-edit">         {{#filters}}           {{{filterRender}}}         {{/filters}}         {{#filters.length}}         <button type="submit" class="btn update-filter">Update</button>         {{/filters.length}}       </form>     </div>   ',filterTemplates:{term:'       <div class="filter-{{type}} filter">         <fieldset>           {{field}}           <a class="js-remove-filter" href="#" title="Remove this filter" data-filter-id="{{id}}">&times;</a>           <input type="text" value="{{term}}" name="term" data-filter-field="{{field}}" data-filter-id="{{id}}" data-filter-type="{{type}}" />         </fieldset>       </div>     '},events:{"click .js-remove-filter":"onRemoveFilter","click .js-add-filter":"onAddFilterShow","submit form.js-edit":"onTermFiltersUpdate","submit form.js-add":"onAddFilter"},initialize:function(){this.el=a(this.el);_.bindAll(this,"render");this.model.fields.bind("all",this.render);this.model.queryState.bind("change",this.render);this.model.queryState.bind("change:filters:new-blank",this.render);this.render()},render:function(){var c=this;var e=a.extend(true,{},this.model.queryState.toJSON());e.filters=_.map(e.filters,function(g,f){g.id=f;return g});e.fields=this.model.fields.toJSON();e.filterRender=function(){return Mustache.render(c.filterTemplates.term,this)};var d=Mustache.render(this.template,e);this.el.html(d)},updateFilter:function(d){var c=this;var f=c.model.queryState.get("filters");var h=a(d);var e=parseInt(h.attr("data-filter-id"),10);var g=h.val();f[e].term=g},onAddFilterShow:function(d){d.preventDefault();var c=a(d.target);c.hide();this.el.find("form.js-add").show()},onAddFilter:function(f){f.preventDefault();var c=a(f.target);c.hide();var d=c.find("select.fields").val();this.model.queryState.addFilter({type:"term",field:d})},onRemoveFilter:function(f){f.preventDefault();var c=a(f.target);var d=c.attr("data-filter-id");this.model.queryState.removeFilter(d)},onTermFiltersUpdate:function(g){var d=this;g.preventDefault();var f=d.model.queryState.get("filters");var c=a(g.target);_.each(c.find("input"),function(e){d.updateFilter(e)});d.model.queryState.set({filters:f,from:0});d.model.queryState.trigger("change")}})})(jQuery,recline.View);